name: Docker Integration Tests

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

jobs:
  unit-tests:
    name: Unit Tests
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Go
      uses: actions/setup-go@v5
      with:
        go-version: '1.21'
        cache: true

    - name: Download dependencies
      run: go mod download

    - name: Run unit tests
      run: make test-unit

    - name: Build provider
      run: make build

  quick-and-datastore-tests:
    name: Quick & Datastore Tests
    runs-on: ubuntu-latest
    needs: unit-tests
    services:
      pbs:
        image: ayufan/proxmox-backup-server:latest
        ports:
          - 8007:8007
        env:
          PBS_USER: admin@pbs
          PBS_PASSWORD: pbspbs
        options: >-
          --memory=2g
          --tmpfs /run
          --tmpfs /var/log/proxmox-backup
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Go
      uses: actions/setup-go@v5
      with:
        go-version: '1.22.10'
        cache: true

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: "1.5.7"
        terraform_wrapper: false

    - name: Download dependencies
      run: go mod download

    - name: Build provider
      run: make build

    - name: Wait for PBS
      run: |
        echo "Waiting for PBS API..."
        for i in {1..30}; do
          if curl -k -f -s https://localhost:8007 >/dev/null 2>&1; then
            echo "✅ PBS ready!"
            break
          fi
          sleep 5
        done

    - name: Run tests
      env:
        PBS_ADDRESS: "https://localhost:8007"
        PBS_USERNAME: "admin@pbs"
        PBS_PASSWORD: "pbspbs"
        PBS_INSECURE_TLS: "true"
      run: |
        go test -v -timeout 15m ./test/integration -run "TestQuickSmoke|TestDatastore"

    - name: Upload test logs
      if: failure()
      uses: actions/upload-artifact@v4
      with:
        name: quick-datastore-test-logs
        path: |
          test/integration/*.log
        retention-days: 7

  s3-aws-tests:
    name: S3 Tests - AWS
    runs-on: ubuntu-latest
    needs: unit-tests
    if: github.event_name == 'push' || github.event_name == 'workflow_dispatch'
    services:
      pbs:
        image: ayufan/proxmox-backup-server:latest
        ports:
          - 8007:8007
        env:
          PBS_USER: admin@pbs
          PBS_PASSWORD: pbspbs
        options: >-
          --memory=2g
          --tmpfs /run
          --tmpfs /var/log/proxmox-backup
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Go
      uses: actions/setup-go@v5
      with:
        go-version: '1.22.10'
        cache: true

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: "1.5.7"
        terraform_wrapper: false

    - name: Download dependencies
      run: go mod download

    - name: Build provider
      run: make build

    - name: Wait for PBS
      run: |
        echo "Waiting for PBS API..."
        for i in {1..30}; do
          if curl -k -f -s https://localhost:8007 >/dev/null 2>&1; then
            echo "✅ PBS ready!"
            break
          fi
          sleep 5
        done

    - name: Run AWS S3 tests
      env:
        PBS_ADDRESS: "https://localhost:8007"
        PBS_USERNAME: "admin@pbs"
        PBS_PASSWORD: "pbspbs"
        PBS_INSECURE_TLS: "true"
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        AWS_REGION: ${{ vars.AWS_REGION || 'us-west-2' }}
        # Only AWS credentials - ensures only AWS tests run
        B2_ACCESS_KEY_ID: ""
        B2_SECRET_ACCESS_KEY: ""
        SCALEWAY_ACCESS_KEY: ""
        SCALEWAY_SECRET_KEY: ""
      run: |
        if [ -z "$AWS_ACCESS_KEY_ID" ]; then
          echo "⚠️  AWS credentials not configured, skipping AWS tests"
          exit 0
        fi
        echo "Running AWS S3 tests..."
        go test -v -timeout 20m ./test/integration -run "AWS"

    - name: Upload test logs
      if: failure()
      uses: actions/upload-artifact@v4
      with:
        name: aws-test-logs
        path: |
          test/integration/*.log
        retention-days: 7

  s3-backblaze-tests:
    name: S3 Tests - Backblaze B2
    runs-on: ubuntu-latest
    needs: unit-tests
    if: github.event_name == 'push' || github.event_name == 'workflow_dispatch'
    services:
      pbs:
        image: ayufan/proxmox-backup-server:latest
        ports:
          - 8007:8007
        env:
          PBS_USER: admin@pbs
          PBS_PASSWORD: pbspbs
        options: >-
          --memory=2g
          --tmpfs /run
          --tmpfs /var/log/proxmox-backup
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Go
      uses: actions/setup-go@v5
      with:
        go-version: '1.22.10'
        cache: true

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: "1.5.7"
        terraform_wrapper: false

    - name: Download dependencies
      run: go mod download

    - name: Build provider
      run: make build

    - name: Wait for PBS
      run: |
        echo "Waiting for PBS API..."
        for i in {1..30}; do
          if curl -k -f -s https://localhost:8007 >/dev/null 2>&1; then
            echo "✅ PBS ready!"
            break
          fi
          sleep 5
        done

    - name: Run Backblaze B2 tests
      env:
        PBS_ADDRESS: "https://localhost:8007"
        PBS_USERNAME: "admin@pbs"
        PBS_PASSWORD: "pbspbs"
        PBS_INSECURE_TLS: "true"
        B2_ACCESS_KEY_ID: ${{ secrets.B2_ACCESS_KEY_ID }}
        B2_SECRET_ACCESS_KEY: ${{ secrets.B2_SECRET_ACCESS_KEY }}
        B2_REGION: ${{ vars.B2_REGION || 'us-west-004' }}
        # Only B2 credentials - ensures only B2 tests run
        AWS_ACCESS_KEY_ID: ""
        AWS_SECRET_ACCESS_KEY: ""
        SCALEWAY_ACCESS_KEY: ""
        SCALEWAY_SECRET_KEY: ""
      run: |
        if [ -z "$B2_ACCESS_KEY_ID" ]; then
          echo "⚠️  Backblaze B2 credentials not configured, skipping B2 tests"
          exit 0
        fi
        echo "Running Backblaze B2 tests..."
        go test -v -timeout 20m ./test/integration -run "Backblaze|B2"

    - name: Upload test logs
      if: failure()
      uses: actions/upload-artifact@v4
      with:
        name: b2-test-logs
        path: |
          test/integration/*.log
        retention-days: 7

  s3-scaleway-tests:
    name: S3 Tests - Scaleway
    runs-on: ubuntu-latest
    needs: unit-tests
    if: github.event_name == 'push' || github.event_name == 'workflow_dispatch'
    services:
      pbs:
        image: ayufan/proxmox-backup-server:latest
        ports:
          - 8007:8007
        env:
          PBS_USER: admin@pbs
          PBS_PASSWORD: pbspbs
        options: >-
          --memory=2g
          --tmpfs /run
          --tmpfs /var/log/proxmox-backup
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Go
      uses: actions/setup-go@v5
      with:
        go-version: '1.22.10'
        cache: true

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: "1.5.7"
        terraform_wrapper: false

    - name: Download dependencies
      run: go mod download

    - name: Build provider
      run: make build

    - name: Wait for PBS
      run: |
        echo "Waiting for PBS API..."
        for i in {1..30}; do
          if curl -k -f -s https://localhost:8007 >/dev/null 2>&1; then
            echo "✅ PBS ready!"
            break
          fi
          sleep 5
        done

    - name: Run Scaleway tests
      env:
        PBS_ADDRESS: "https://localhost:8007"
        PBS_USERNAME: "admin@pbs"
        PBS_PASSWORD: "pbspbs"
        PBS_INSECURE_TLS: "true"
        SCALEWAY_ACCESS_KEY: ${{ secrets.SCALEWAY_ACCESS_KEY }}
        SCALEWAY_SECRET_KEY: ${{ secrets.SCALEWAY_SECRET_KEY }}
        SCALEWAY_REGION: ${{ vars.SCALEWAY_REGION || 'fr-par' }}
        # Only Scaleway credentials - ensures only Scaleway tests run
        AWS_ACCESS_KEY_ID: ""
        AWS_SECRET_ACCESS_KEY: ""
        B2_ACCESS_KEY_ID: ""
        B2_SECRET_ACCESS_KEY: ""
      run: |
        if [ -z "$SCALEWAY_ACCESS_KEY" ]; then
          echo "⚠️  Scaleway credentials not configured, skipping Scaleway tests"
          exit 0
        fi
        echo "Running Scaleway tests..."
        go test -v -timeout 20m ./test/integration -run "Scaleway"

    - name: Upload test logs
      if: failure()
      uses: actions/upload-artifact@v4
      with:
        name: scaleway-test-logs
        path: |
          test/integration/*.log
        retention-days: 7

  s3-cleanup-tests:
    name: S3 Cleanup Tests
    runs-on: ubuntu-latest
    needs: [s3-aws-tests, s3-backblaze-tests, s3-scaleway-tests]
    if: always() && (github.event_name == 'push' || github.event_name == 'workflow_dispatch')
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Go
      uses: actions/setup-go@v5
      with:
        go-version: '1.22.10'
        cache: true

    - name: Download dependencies
      run: go mod download

    - name: Run S3 cleanup tests
      env:
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        AWS_REGION: ${{ vars.AWS_REGION || 'us-west-2' }}
        B2_ACCESS_KEY_ID: ${{ secrets.B2_ACCESS_KEY_ID }}
        B2_SECRET_ACCESS_KEY: ${{ secrets.B2_SECRET_ACCESS_KEY }}
        B2_REGION: ${{ vars.B2_REGION || 'us-west-004' }}
        SCALEWAY_ACCESS_KEY: ${{ secrets.SCALEWAY_ACCESS_KEY }}
        SCALEWAY_SECRET_KEY: ${{ secrets.SCALEWAY_SECRET_KEY }}
        SCALEWAY_REGION: ${{ vars.SCALEWAY_REGION || 'fr-par' }}
      run: |
        echo "Running S3 cleanup tests..."
        go test -v -timeout 10m ./test/integration -run "TestCleanup"

  test-summary:
    name: Test Summary
    runs-on: ubuntu-latest
    needs: [quick-and-datastore-tests, s3-aws-tests, s3-backblaze-tests, s3-scaleway-tests, s3-cleanup-tests]
    if: always()
    steps:
    - name: Check test results
      run: |
        echo "All Docker-based integration tests completed"
        # This job will show as success if all tests passed, or show which failed

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Go
      uses: actions/setup-go@v5
      with:
        go-version: '1.22.10'

    - name: Run Gosec Security Scanner
      run: |
        go install github.com/securego/gosec/v2/cmd/gosec@latest
        gosec -fmt sarif -out gosec.sarif ./... || true

    - name: Run govulncheck
      run: |
        go install golang.org/x/vuln/cmd/govulncheck@latest
        govulncheck ./... || echo "Vulnerabilities found but continuing build..."

  lint:
    name: Lint
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Go
      uses: actions/setup-go@v5
      with:
        go-version: '1.22.10'
        cache: false  # golangci-lint manages its own cache

    - name: Tidy dependencies
      run: go mod tidy

    - name: golangci-lint
      uses: golangci/golangci-lint-action@v6
      with:
        version: latest
        args: --timeout=5m