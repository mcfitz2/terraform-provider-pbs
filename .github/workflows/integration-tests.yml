name: Docker Integration Tests

# This workflow runs integration tests in Docker containers (no hardware dependencies).
# 
# Test Suites:
#   1. Core Integration Tests - Datastore (non-ZFS), Metrics, Jobs, Notifications
#   2. S3 Integration Tests - AWS, Backblaze B2, Scaleway (requires credentials)
#   3. Hardware-Dependent Tests - EXCLUDED (ZFS requires VM with kernel modules)
#
# Code coverage is collected during test runs and reported via Codecov.
# Coverage annotations will appear on pull requests showing which lines are covered.
# Coverage reports and trends are available at https://codecov.io

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

jobs:
  unit-tests:
    name: Unit Tests
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Go
      uses: actions/setup-go@v5
      with:
        go-version: '1.21'
        cache: true

    - name: Download dependencies
      run: go mod download

    - name: Run unit tests
      run: go test -coverprofile=coverage-unit.out -covermode=atomic ./...

    - name: Upload unit test coverage
      uses: actions/upload-artifact@v4
      with:
        name: coverage-unit
        path: coverage-unit.out
        retention-days: 7

    - name: Report unit test coverage
      uses: codecov/codecov-action@v4
      with:
        files: ./coverage-unit.out
        flags: unit-tests
        name: unit-tests-coverage

    - name: Build provider
      run: make build

  core-integration-tests:
    name: Core Integration Tests (Non-S3, Non-Hardware)
    runs-on: ubuntu-latest
    needs: unit-tests
    services:
      pbs:
        image: ayufan/proxmox-backup-server:latest
        ports:
          - 8007:8007
        env:
          PBS_USER: admin@pbs
          PBS_PASSWORD: pbspbs
        options: >-
          --memory=2g
          --tmpfs /run
          --tmpfs /var/log/proxmox-backup
      
      influxdb:
        image: influxdb:2.7
        ports:
          - 8086:8086
        env:
          DOCKER_INFLUXDB_INIT_MODE: setup
          DOCKER_INFLUXDB_INIT_USERNAME: admin
          DOCKER_INFLUXDB_INIT_PASSWORD: adminpassword
          DOCKER_INFLUXDB_INIT_ORG: testorg
          DOCKER_INFLUXDB_INIT_BUCKET: pbs-metrics
          DOCKER_INFLUXDB_INIT_ADMIN_TOKEN: test-token-123456
        options: >-
          --health-cmd "influx ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
      
      influxdb-udp:
        image: influxdb:1.8
        ports:
          - 8089:8089/udp
        env:
          INFLUXDB_UDP_ENABLED: true
          INFLUXDB_UDP_BIND_ADDRESS: :8089
          INFLUXDB_UDP_DATABASE: udp
        options: >-
          --health-cmd "influx -execute 'SHOW DATABASES'"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Go
      uses: actions/setup-go@v5
      with:
        go-version: '1.22.10'
        cache: true

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: "1.5.7"
        terraform_wrapper: false

    - name: Download dependencies
      run: go mod download

    - name: Build provider
      run: make build

    - name: Wait for PBS
      run: |
        echo "Waiting for PBS API..."
        for i in {1..30}; do
          if curl -k -f -s https://localhost:8007 >/dev/null 2>&1; then
            echo "✅ PBS ready!"
            break
          fi
          sleep 5
        done
    
    - name: Prepare PBS test directories
      run: |
        # Get the PBS container ID
        PBS_CONTAINER=$(docker ps --filter "ancestor=ayufan/proxmox-backup-server:latest" --format "{{.ID}}")
        echo "PBS container: $PBS_CONTAINER"
        
        # Create base datastore directory with proper permissions
        # PBS API requires directories to exist before datastores can be registered
        docker exec $PBS_CONTAINER mkdir -p /datastore
        docker exec $PBS_CONTAINER chmod 755 /datastore
        docker exec $PBS_CONTAINER chown backup:backup /datastore
        echo "✅ PBS test directories created"

    - name: Run core integration tests
      env:
        PBS_ADDRESS: "https://localhost:8007"
        PBS_USERNAME: "admin@pbs"
        PBS_PASSWORD: "pbspbs"
        PBS_INSECURE_TLS: "true"
        # Use service names for inter-container communication in GitHub Actions
        TEST_INFLUXDB_HOST: "influxdb"
        TEST_INFLUXDB_PORT: "8086"
        TEST_INFLUXDB_UDP_HOST: "influxdb-udp"
        TEST_INFLUXDB_UDP_PORT: "8089"
      run: |
        # Run all tests except S3 and hardware-dependent tests (ZFS)
        # Includes: Quick smoke, Datastore (non-ZFS), Metrics, Jobs, Notifications
        go test -v -timeout 20m -coverprofile=coverage-core.out -covermode=atomic ./test/integration \
          -run "TestQuickSmoke|TestDatastore|TestMetrics|Test.*Job|Test.*Notification" \
          -skip "TestDatastoreZFS|TestS3|TestCleanup"

    - name: Upload coverage
      uses: actions/upload-artifact@v4
      with:
        name: coverage-core-integration
        path: coverage-core.out
        retention-days: 7

    - name: Report coverage
      uses: codecov/codecov-action@v4
      with:
        files: ./coverage-core.out
        flags: integration-core
        name: core-integration-coverage

    - name: Upload test logs
      if: failure()
      uses: actions/upload-artifact@v4
      with:
        name: core-integration-test-logs
        path: |
          test/integration/*.log
        retention-days: 7

  s3-aws-tests:
    name: S3 Integration Tests - AWS
    runs-on: ubuntu-latest
    needs: core-integration-tests
    if: github.event_name == 'push' || github.event_name == 'workflow_dispatch'
    services:
      pbs:
        image: ayufan/proxmox-backup-server:latest
        ports:
          - 8007:8007
        env:
          PBS_USER: admin@pbs
          PBS_PASSWORD: pbspbs
        options: >-
          --memory=2g
          --tmpfs /run
          --tmpfs /var/log/proxmox-backup
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Go
      uses: actions/setup-go@v5
      with:
        go-version: '1.22.10'
        cache: true

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: "1.5.7"
        terraform_wrapper: false

    - name: Download dependencies
      run: go mod download

    - name: Build provider
      run: make build

    - name: Wait for PBS
      run: |
        echo "Waiting for PBS API..."
        for i in {1..30}; do
          if curl -k -f -s https://localhost:8007 >/dev/null 2>&1; then
            echo "✅ PBS ready!"
            break
          fi
          sleep 5
        done

    - name: Run AWS S3 tests
      env:
        PBS_ADDRESS: "https://localhost:8007"
        PBS_USERNAME: "admin@pbs"
        PBS_PASSWORD: "pbspbs"
        PBS_INSECURE_TLS: "true"
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        AWS_REGION: ${{ vars.AWS_REGION || 'us-west-2' }}
        # Only AWS credentials - ensures only AWS tests run
        B2_ACCESS_KEY_ID: ""
        B2_SECRET_ACCESS_KEY: ""
        SCALEWAY_ACCESS_KEY: ""
        SCALEWAY_SECRET_KEY: ""
      run: |
        if [ -z "$AWS_ACCESS_KEY_ID" ]; then
          echo "⚠️  AWS credentials not configured, skipping AWS tests"
          exit 0
        fi
        echo "Running AWS S3 tests..."
        go test -v -timeout 20m -coverprofile=coverage-aws.out -covermode=atomic ./test/integration -run "AWS"

    - name: Upload coverage
      uses: actions/upload-artifact@v4
      with:
        name: coverage-aws
        path: coverage-aws.out
        retention-days: 7

    - name: Report coverage
      uses: codecov/codecov-action@v4
      with:
        files: ./coverage-aws.out
        flags: integration-s3-aws
        name: aws-s3-coverage

    - name: Upload test logs
      if: failure()
      uses: actions/upload-artifact@v4
      with:
        name: aws-test-logs
        path: |
          test/integration/*.log
        retention-days: 7

  s3-backblaze-tests:
    name: S3 Integration Tests - Backblaze B2
    runs-on: ubuntu-latest
    needs: core-integration-tests
    if: github.event_name == 'push' || github.event_name == 'workflow_dispatch'
    services:
      pbs:
        image: ayufan/proxmox-backup-server:latest
        ports:
          - 8007:8007
        env:
          PBS_USER: admin@pbs
          PBS_PASSWORD: pbspbs
        options: >-
          --memory=2g
          --tmpfs /run
          --tmpfs /var/log/proxmox-backup
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Go
      uses: actions/setup-go@v5
      with:
        go-version: '1.22.10'
        cache: true

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: "1.5.7"
        terraform_wrapper: false

    - name: Download dependencies
      run: go mod download

    - name: Build provider
      run: make build

    - name: Wait for PBS
      run: |
        echo "Waiting for PBS API..."
        for i in {1..30}; do
          if curl -k -f -s https://localhost:8007 >/dev/null 2>&1; then
            echo "✅ PBS ready!"
            break
          fi
          sleep 5
        done

    - name: Run Backblaze B2 tests
      env:
        PBS_ADDRESS: "https://localhost:8007"
        PBS_USERNAME: "admin@pbs"
        PBS_PASSWORD: "pbspbs"
        PBS_INSECURE_TLS: "true"
        B2_ACCESS_KEY_ID: ${{ secrets.B2_ACCESS_KEY_ID }}
        B2_SECRET_ACCESS_KEY: ${{ secrets.B2_SECRET_ACCESS_KEY }}
        B2_REGION: ${{ vars.B2_REGION || 'us-west-004' }}
        # Only B2 credentials - ensures only B2 tests run
        AWS_ACCESS_KEY_ID: ""
        AWS_SECRET_ACCESS_KEY: ""
        SCALEWAY_ACCESS_KEY: ""
        SCALEWAY_SECRET_KEY: ""
      run: |
        if [ -z "$B2_ACCESS_KEY_ID" ]; then
          echo "⚠️  Backblaze B2 credentials not configured, skipping B2 tests"
          exit 0
        fi
        echo "Running Backblaze B2 tests..."
        go test -v -timeout 20m -coverprofile=coverage-b2.out -covermode=atomic ./test/integration -run "Backblaze|B2"

    - name: Upload coverage
      uses: actions/upload-artifact@v4
      with:
        name: coverage-b2
        path: coverage-b2.out
        retention-days: 7

    - name: Report coverage
      uses: codecov/codecov-action@v4
      with:
        files: ./coverage-b2.out
        flags: integration-s3-b2
        name: b2-s3-coverage

    - name: Upload test logs
      if: failure()
      uses: actions/upload-artifact@v4
      with:
        name: b2-test-logs
        path: |
          test/integration/*.log
        retention-days: 7

  s3-scaleway-tests:
    name: S3 Integration Tests - Scaleway
    runs-on: ubuntu-latest
    needs: core-integration-tests
    if: github.event_name == 'push' || github.event_name == 'workflow_dispatch'
    services:
      pbs:
        image: ayufan/proxmox-backup-server:latest
        ports:
          - 8007:8007
        env:
          PBS_USER: admin@pbs
          PBS_PASSWORD: pbspbs
        options: >-
          --memory=2g
          --tmpfs /run
          --tmpfs /var/log/proxmox-backup
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Go
      uses: actions/setup-go@v5
      with:
        go-version: '1.22.10'
        cache: true

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: "1.5.7"
        terraform_wrapper: false

    - name: Download dependencies
      run: go mod download

    - name: Build provider
      run: make build

    - name: Wait for PBS
      run: |
        echo "Waiting for PBS API..."
        for i in {1..30}; do
          if curl -k -f -s https://localhost:8007 >/dev/null 2>&1; then
            echo "✅ PBS ready!"
            break
          fi
          sleep 5
        done

    - name: Run Scaleway tests
      env:
        PBS_ADDRESS: "https://localhost:8007"
        PBS_USERNAME: "admin@pbs"
        PBS_PASSWORD: "pbspbs"
        PBS_INSECURE_TLS: "true"
        SCALEWAY_ACCESS_KEY: ${{ secrets.SCALEWAY_ACCESS_KEY }}
        SCALEWAY_SECRET_KEY: ${{ secrets.SCALEWAY_SECRET_KEY }}
        SCALEWAY_REGION: ${{ vars.SCALEWAY_REGION || 'fr-par' }}
        # Only Scaleway credentials - ensures only Scaleway tests run
        AWS_ACCESS_KEY_ID: ""
        AWS_SECRET_ACCESS_KEY: ""
        B2_ACCESS_KEY_ID: ""
        B2_SECRET_ACCESS_KEY: ""
      run: |
        if [ -z "$SCALEWAY_ACCESS_KEY" ]; then
          echo "⚠️  Scaleway credentials not configured, skipping Scaleway tests"
          exit 0
        fi
        echo "Running Scaleway tests..."
        go test -v -timeout 20m -coverprofile=coverage-scaleway.out -covermode=atomic ./test/integration -run "Scaleway"

    - name: Upload coverage
      uses: actions/upload-artifact@v4
      with:
        name: coverage-scaleway
        path: coverage-scaleway.out
        retention-days: 7

    - name: Report coverage
      uses: codecov/codecov-action@v4
      with:
        files: ./coverage-scaleway.out
        flags: integration-s3-scaleway
        name: scaleway-s3-coverage

    - name: Upload test logs
      if: failure()
      uses: actions/upload-artifact@v4
      with:
        name: scaleway-test-logs
        path: |
          test/integration/*.log
        retention-days: 7

  s3-cleanup-tests:
    name: S3 Cleanup Tests
    runs-on: ubuntu-latest
    needs: [s3-aws-tests, s3-backblaze-tests, s3-scaleway-tests]
    if: always() && (github.event_name == 'push' || github.event_name == 'workflow_dispatch')
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Go
      uses: actions/setup-go@v5
      with:
        go-version: '1.22.10'
        cache: true

    - name: Download dependencies
      run: go mod download

    - name: Run S3 cleanup tests
      env:
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        AWS_REGION: ${{ vars.AWS_REGION || 'us-west-2' }}
        B2_ACCESS_KEY_ID: ${{ secrets.B2_ACCESS_KEY_ID }}
        B2_SECRET_ACCESS_KEY: ${{ secrets.B2_SECRET_ACCESS_KEY }}
        B2_REGION: ${{ vars.B2_REGION || 'us-west-004' }}
        SCALEWAY_ACCESS_KEY: ${{ secrets.SCALEWAY_ACCESS_KEY }}
        SCALEWAY_SECRET_KEY: ${{ secrets.SCALEWAY_SECRET_KEY }}
        SCALEWAY_REGION: ${{ vars.SCALEWAY_REGION || 'fr-par' }}
      run: |
        echo "Running S3 cleanup tests..."
        go test -v -timeout 10m ./test/integration -run "TestCleanup"

  test-summary:
    name: Test Summary
    runs-on: ubuntu-latest
    needs: [core-integration-tests, s3-aws-tests, s3-backblaze-tests, s3-scaleway-tests, s3-cleanup-tests]
    if: always()
    steps:
    - name: Check test results
      run: |
        echo "All Docker-based integration tests completed"
        echo "Test Suites:"
        echo "  ✓ Core Integration Tests (Non-S3, Non-Hardware)"
        echo "  ✓ S3 Integration Tests (AWS, B2, Scaleway)"
        echo "  ✓ S3 Cleanup Tests"
        echo ""
        echo "Note: Hardware-dependent tests (ZFS) run only in VM workflow"

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Go
      uses: actions/setup-go@v5
      with:
        go-version: '1.22.10'

    - name: Run Gosec Security Scanner
      run: |
        go install github.com/securego/gosec/v2/cmd/gosec@latest
        gosec -fmt sarif -out gosec.sarif ./... || true

    - name: Run govulncheck
      run: |
        go install golang.org/x/vuln/cmd/govulncheck@latest
        govulncheck ./... || echo "Vulnerabilities found but continuing build..."

  lint:
    name: Lint
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Go
      uses: actions/setup-go@v5
      with:
        go-version: '1.22.10'
        cache: false  # golangci-lint manages its own cache

    - name: Tidy dependencies
      run: go mod tidy

    - name: golangci-lint
      uses: golangci/golangci-lint-action@v6
      with:
        version: latest
        args: --timeout=5m